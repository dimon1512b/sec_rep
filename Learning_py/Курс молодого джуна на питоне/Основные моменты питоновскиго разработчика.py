"""
Три ступени развития развития разработчика:
1. Знание основных базавых конструкций языка програмирования - синтаксис
2. Знания более общирные. Знание стандартных библиотек, баз данных и всего что выходит за рамки синтаксиса
3. Понимание архитектуры програмных решений, правильная работа с ООП, понимание паттернов разработки
	Паттерн проектирования — это часто встречающееся решение определённой проблемы при проектировании архитектуры программ.

	В отличие от готовых функций или библиотек, паттерн нельзя просто взять и скопировать в программу.
	Паттерн представляет собой не какой-то конкретный код, а общую концепцию решения той или иной проблемы,
	которую нужно будет ещё подстроить под нужды вашей программы.
Реализованная задача это та задача которая будет поддерживаема. Функционал может быть, но если это решение не
поддерживаемо то нельзя сказать что эта задача реализована. Как например поставить бревно вместо колеса на
автосервисе. Задача какбы и решена но такое решение никуда не годится.

Обучение на проффесионального, годного разработчика это не спринт, это марафон. Важно преодолевать эту дистанцию с
любовью к тому что ты делаешь

Критично важные качевства для проффесионального успеха:
1.Умение брать ответственность

Получается что чем больше ответсвенности я готов на себя взять, чем больше задач на мне завязано, тем больше моя
ценность, навыки, польза и компании и клиентам
Инициативность сдесь так же приплетена
Этим ты расширяешь сферу своего влияния

2.Умение дожимать до результата

Чистый стол на 80% это не чистый стол

Что должен знать Python web developer для приема на работу:
1.  Понимание как собственно работает веб
2.  DNS
3.  Как привязать к домену свой сервер
4.Настройка работы домена по HTTPS протоколу
5.Что такое Http и какие есть его виды, статусы, поля
6.Как работают и для чего нужны Cookies, какие они бывают. Как с ними работать с киентской части и серверной части
7.Как работают авторизация  и аутентификация на веб-сайтах и в мобильных приложениях
8.уметь настроить механизм сессий без веб-фреймворков, просто чтобы понимать,
как это всё работает под капотом вашего любимого фреймворка
9.  HTML
10.знать о семантической разметке
11.уметь использовать flex-боксы, флоаты, таблицы и тд.
12.про адаптивную верстку тоже хорошо бы знать и уметь, все эти media queries и тд.
13.Python. Конечно, нам надо знать Python.
14. Типы данных
15. Форматирования строк, приведение типов и тд.
16. Классы и объекты.
17. Аргументы в функциях — позиционные и keyword, args и kwargs.
18. Функции map, reduce, zip. Лямбда функции
19. Генераторы, декораторы. Исключения.
20.Асинхронность в питоне..............
21. Регулярные выражения. Библиотека 're'
22.Логирование
23.Работа с pickle дампами, с JSON.
24. Работа с датами
25. Third-party библиотеки. Такие как requests. Библиотеки для работы с Excel документами, PDF, XML, HTML
26. Веб-фреймворки.
27.Django.............
28.PEP8
29.git — хотя бы базовые заведение репозиториев, ветки, коммиты, мержи.
30.chrome developer tools
40.PostgreSQL
41.Надо знать про индексы и про хотя бы минимальную их настройку
42.про внешние ключи и нормализацию и денормализацию БД
43.плюсы и минусы нормализованной и денормализованной БД.
44. Linux
45. Умение гуглить

Про базовый фундамент в разработке веб-приложений!!!!!!!!!

Перед тем как изчать фрайм ворк и язык програмирования есть большой смысл подтянуть базовую информацию о вебе, 
интернете, базах данных и тд. Это как в спорте, ОФП в спорте это тоже самое
А язык это всего лишь инструмент. Хороший программист разбирается во всех языках, минимум понимает что там написано

Ошибки которых нужно избегать:
1. Отступы
2. Нейминг. Он должен быть максимально узконаправлен и понятен. Код с хорошим неймингом читается как поема
3. Коментарии. Они должны быть! Это поможет лучше разбираться в коде стороннему читателю и тебе самому в будущем
4. Документация по проекту должна быть. Как установить. Что делает. Скрины. Переменные окружения, другие переменные.
Описание
архитектуры
5. Не писать бизнес логику в Вьюшке. Выносить её в отдельную директорию
6. Сокращать длинну функции. Не может быть одна сверхдлинная функция отвечающия за все. Лучше её разбить на
подфункции и логично их подписать
7. Прежде чем реализовывать что-то самому убедитесь что это не реализовано в Фрайморке
8. Чаще пользоваться исключениями Трай-Ексцепт
9. Логирование использовать обязательно
10. Не хранить конфидинциальные данные в репозитории. Хранить их в переменных окружения
11. Необходим файл Requirements файл с зависимостями
12. Преждевременное изучение и попытки внедрить какие-то паттерны и шаблоны проэктирования.

Принцип EAFP в Python!!!

Проще попросить прощения чем разрешения
Имеется в виду использование конструкций Трай-Ексцепт

Замерять время лучше через time.monotonic()

import time

start_time = time.monotonic()

some_func()

print(time.monotonic() - start_time)

"""
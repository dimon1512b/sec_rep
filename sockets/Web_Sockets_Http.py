"""
Сетевая модель OSI состоить из семи уровней
Каждый уровень отвечает за определённую облать задач
Сетевая модель OSI (The Open Systems Interconnection model) — сетевая модель стека (магазина) сетевых протоколов
OSI/ISO. Посредством данной модели различные сетевые устройства могут взаимодействовать друг с другом.
Модель определяет различные уровни взаимодействия систем.
Каждый уровень выполняет определённые функции при таком взаимодействии.
1. Физичекий уровень
2. Канальный уровень
3. Сетевой уровень
4. Транспортный уровень
5. Сеансовый уровень
6. Представителький уровень
7. Прикладной уровень

Каждый высший уровень базируется на предыдущем

Каждое устройство в сети должно быть адресовано

Socket - инструмент для установки непрерывного соединения между двумя компонентами сети.
Два типа сокетов:
1. Серверный - сам сервер к которому есть возможность подключиться и отправить данные. Может выступать только в роли
слушателя новых подключений но не может устанавливать соединения или же подключатся как клиенты
2. Клиентский - программа которая подключается к серверному сокету и обменивается данными. Клинтский сокет не может
принимать соединения а может только подключатся к серверным сокетам

В стандартной библиотеке питона есть специальный модуль "socket" для создания серверов и клиентов

Найболее используемые протоколы для обмена данными:
1. UDP (user datagram protocol)
Данный протокол предназначен для отправки пользовательских датаграм. Это не большие пакеты которые отправляются другому
компоненту сети без установки соединения(рукопожатия). Отправив несколько пакетов в сеть ЮДП не гаранирует очередность
и гарантию их доставки.
- Не надёжный
- Порядок пакетов может быть нарушен
- Отсусдствие рукопожатия
Где может применяться? - Например если нам просто нужно отправлять пакет каждые n секунд без необходимости проверки
доставки, а просто для оповещения других компонентов. Например если устройство включилось и отправляет пакеты уведомляя
всю сеть о подключении нового устройства
2. TCP (transmission control protocol)
Устанавлиявается связь между клинтом и сервером и на момент существования этого подключения мы обмениваемся данными
- Данный протокол является надёжным
- Порядок пакетов соблюдается
- Рукопожатие перед установкой соединяния
- Обмен данными
Для реализации этого протоколо необходимо установить SOCK_STREAM.
Далее резервируем порт
Далее определяем размер очереди методом listen(number)
Далее обрабатываем очередь методом accept который берет первый клиент из очереди или ждёт пока пояится хоть один
и обрабатывает это соединение.

Unix Sockets - используют в качестве точки обмена не айпи с портом а файл. В таком случаее нужно на серверном сокете
проверять существует ли уже такой файл и если да то удалять его. Устанавливаем в создание экземпляра сокета первую
константу AF_UNIX. Тогда в методе .bind мы передадим путь к этому файлу и этот метод создаст такой файл. Если же
передать в метод .bind путь к файлу не определив AF_UNIX константу то получим ошибку. В клиенте всё тоже самое.
Указываем AF_UNIX, а в методе sendto передаем не кортеж с айпи и портом, а передаёт путь к файлу

0.0.0.0 || 127.0.0.1 || localhost это всё только интерфейсы локал хоста. На серверном сокете можно указать 0.0.0.0
и это значит что сервер будет обрабатывать все интерфейсы на которые клиент может отправлять данные


"""